#!/usr/bin/env node
const program = require('commander');
const fs = require('fs');
const mongoose = require('mongoose');
const makeTimelineModel = require('../lib/models/timeline');
const config = require('../lib/config');
//const control = require('../lib/controller');

program
  .option('-s, --server [server]', 'IP Direction of MongoDB')
  .option('-c, --collection [collection]', 'Collection name')
  .option('-f, --file-config [fileConfig]', 'User a config file')
  .parse(process.argv);

const params = program.args;

// Validations
if (!params.length) {
  console.error('data file required');
  process.exit(1);
} else { 
	if (params.length > 1) {
		console.error('only one argument allowed');
		process.exit(1)
  }
}
if (!program.collection) {
	console.error('-c Collection argument its required');
	process.exit(1);
}

if (program.server) {
	config.mongodb.server = program.server.toString();
}

if (program.fileConfig) {
	console.log(program.fileConfig);
}

if (!fs.existsSync(params[0])) {
  console.error(`File ${params[0]} not exist.`);
  process.exist(1);
}
async function saveDataR(data, Model) {
  const createdAt = new Date(data.created_at);
  const timeline = new Model({
    id: data.id,
    id_str: data.id_str,
    user: data.user.screen_name,
    tags: data.entities.hashtags.toString(),
    created_at: createdAt,
    text: data.text,
    retweeted: data.retweeted,
    retweet_count: data.retweet_count,
    favorite_count: data.favorite_count,
  });
  try{
    await timeline.save();
    console.log('Tweet saved');
  } catch (err) {
    console.log(err.message);
  }
}

// Main()

const TimelineModel = makeTimelineModel(program.collection.toString());
const tweetsFile = JSON.parse(fs.readFileSync(params[0]));
/*console.log(`mongodb://${config.mongodb.server}`);
mongoose.connect(`mongodb://${config.mongodb.server}/testing`, { useNewUrlParser: true })
  .then(() => console.log('Now connected to MongoDB!'))
  .catch(err => console.error('Something went wrong', err));*/

const saveTweet = async (data) => { await saveDataR(data, TimelineModel); };

async function loadToDb() {
  await Promise.all(tweetsFile.data.map(saveTweet));
  return 'finish';
}

async function main() {
  try {
    await mongoose.connect(`mongodb://${config.mongodb.server}/testing`, { useNewUrlParser: true });
    console.log('Now connected to MongoDb');
  } catch (err) {
    console.error(`Something went wrong ${err}`);
  }
  await loadToDb();
  const count = await TimelineModel.countDocuments();
  console.log(`Now there are ${count} documents in ${program.collection}.`);
  await mongoose.connection.close();
  console.log('Connection Closed, finish.');
}

main();
